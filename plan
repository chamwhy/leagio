leag.io

사용 모듈
-nodejs
-socket.io
-heroku or wns

서버 작동
sai그림 파일 첨부

게임 작동
1.초기화면
2.방 목록 화면 (솔로는 제외)
3.게임 화면

1.초기화면
-페이지가 로드되면 서버namespace default에 접속 => 유저수 요청 => 서버 응답
-3개의 모드 일반, 랭크, 솔로
-시작 버튼 클릭 => namespace-"${모드}" 접속

2.방 목록 화면
//all = 방에 들어가 있는 클라이언트 모두에게 전송

-서버입장 => 서버에 방목록 요청 => 방 받음 => 2분마다 방목록 재요청 => 방 생성신호가 들어오면 방 gui 생성
-방 만들기 => 서버에 방 만들기 요청 => 응답하고 자동으로 방 접속
-설정 => 확인 버튼 누르면 서버에 요청 => 방 설정 확인 => 만약 설정이 큰 틀이면 방 목록에도 표시되기 때문에 모든 유저한테 전송
-준비 => 서버에 준비 완료 => 모두 준비가 됬음에도 시작을 안하면 방장 강퇴
-빠른 매칭 => 방 목록 요청 => 목록중에서 찾음 => 방입장 서버 요청 => 입장

-입장 => all
-캐릭터 설정 서버 요청 => all
-방장 게임 시작 => all

3.게임 화면
ㄱ)플레이
-렌더링
1.배경
2.장애물
3.몹
4.플레이어
5.공격
6.가림막
7.ui
game 클래스에 카메라 위치 변수
카메라 위치를 주면서 렌더링 순서대로
game클래스에서 캔버스 렌더링 명령
카메라로 보이는 화면만 렌더링
game클래스에서 이벤트 관리, 다른 클래스들은 모두 렌더링 관리

게임 클래스 관리 목록
-렌더링 명령 관리
-코인 관리
-캔버스에 칠할 오브젝트 관리
-상점 관리
-피격 판단 관리

ㄴ)관전


# leagio
## 1.렌더링 데이터 작성
  -
## 2.게임 동작 코드 작성
  - 초기 설정
  - 렌더링 명령 작성
  - 입력 이벤트 설정
  - 최단거리 알고리즘 작성
  - 스킬 명령 작성
  - 상점 제작
## 3.socket.io, peer.js 사용해서 서버-클라이언트 시스템 구축
## 4.유저 로그인 기능 제작
## 5.데이터베이스 설정
